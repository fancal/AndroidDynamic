apply plugin: 'com.android.application'

android {

    /**
     * 编译SDK版本
     * */
    compileSdkVersion 23

    /**
     * BuildTool版本
     * */
    buildToolsVersion "23.0.3"

    /**
     * 默认配置项，包名、最小SDK版本、目标SDK版本、版本号、版本名
     * */
    defaultConfig {
        applicationId "com.elianshang.wms.app.releasecollection"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    /**
     * java版本
     * */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    /**
     * 签名配置
     * */
    signingConfigs {
        releaseConfig {
            keyAlias 'lsh.keystore'
            keyPassword 'lianshang'
            storeFile file('./lsh.keystore')
            storePassword 'lianshang'
        }
    }

    buildTypes {

        /**
         * 调试模式
         * */
        debug {

            /**
             * 打印Log
             * */
            buildConfigField "boolean", "LOG_DEBUG", "true"

            /**
             * 压缩安装包
             * */
            zipAlignEnabled true

            /**
             * 移除无用的resource文件
             * */
            shrinkResources false

            /**
             * 是否进行混淆
             * */
            minifyEnabled false

            /**
             * 混淆文件的位置，前一部分是系统默认的混淆声明，后一部分是自定义的混淆声明
             * */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            /**
             * 签名配置
             * */
            signingConfig signingConfigs.releaseConfig

            /**
             * 测试默认值,直接运行安装方便使用
             * */
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "test", PCODE_VALUE: "test", CONFIG_VALUE: "test"]

        }

        /**
         * 发布模式
         * */
        release {

            /**
             * 打印Log
             * */
            buildConfigField "boolean", "LOG_DEBUG", "false"

            /**
             * 压缩安装包
             * */
            zipAlignEnabled true

            /**
             * 移除无用的resource文件
             * */
            shrinkResources true

            /**
             * 是否进行混淆
             * */
            minifyEnabled true

            /**
             * 混淆文件的位置，前一部分是系统默认的混淆声明，后一部分是自定义的混淆声明
             * */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            /**
             * 签名配置
             * */
            signingConfig signingConfigs.releaseConfig

            /**
             * 打多渠道包
             * */
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "l_app_releasecollection_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(System.getProperty("user.home")+"/rf/", fileName)
                    }
                }
            }
        }
    }

    /**
     * lint检查设置
     * */
    lintOptions {

        /**
         * 放弃提示错误
         * */
        abortOnError false
    }

    /**
     * 多渠道名字
     * */
    productFlavors {
        tttt {}//测试包
//        official {}//官网
//        qihu360 {}//360
//        baidu {}//百度
//        yingyongbao {}//应用宝
//        xiaomi {}//小米
        //lakala {}//拉卡拉
    }

    /**
     * 将渠道名赋给Umeng渠道
     * */
    productFlavors.all { flavor ->
        if ("tttt" == name) {
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: "test", PCODE_VALUE: "test", CONFIG_VALUE: "test"]
        } else {
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, PCODE_VALUE: name, CONFIG_VALUE: "public"]
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':bridge_lib')
}
